package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	"postavkinBot/internal/wb"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	notifiedWarehouses = make(map[int64]map[int]int64) // userID -> warehouseID -> timestamp
	checkInterval      = 15 * time.Second              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
	repeatNotifyDelay  = time.Minute                   // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
	cachedWarehouses   []wb.Warehouse                  // –ö—ç—à —Å–∫–ª–∞–¥–æ–≤
)

// StartCronJob ‚Äî –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏
func StartCronJob(bot *tgbotapi.BotAPI) {
	var err error
	cachedWarehouses, err = WbClient.GetWarehouses()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: %v", err)
	}

	go func() {
		for {
			log.Println("[CRON] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∫—ç—à—É...")
			checkWarehouses(bot)
			time.Sleep(checkInterval)
		}
	}()
}

// SetCheckInterval ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
func SetCheckInterval(seconds int) {
	if seconds <= 0 {
		seconds = 1
	}
	checkInterval = time.Duration(seconds) * time.Second
	log.Printf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –∫–∞–∂–¥—ã–µ %d —Å–µ–∫—É–Ω–¥\n", seconds)
}

// checkWarehouses ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func checkWarehouses(bot *tgbotapi.BotAPI) {
	users, err := Storage.GetAllUsers()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}

	coefficients, err := WbClient.GetAcceptanceCoefficients()
	if err != nil {
		if isTooManyRequestsError(err) {
			log.Println("[WARN] –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429), –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É 1 –º–∏–Ω—É—Ç—É...")
			time.Sleep(1 * time.Minute)
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—ë–º–∫–∏: %v", err)
		}
		return
	}

	for _, user := range users {
		checkUserWarehouses(bot, user.TelegramID, cachedWarehouses, coefficients)
	}
}

// checkUserWarehouses ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func checkUserWarehouses(bot *tgbotapi.BotAPI, telegramID int64, allWarehouses []wb.Warehouse, coefficients []wb.Coefficient) {
	warehouseIDs, err := Storage.GetUserWarehouses(telegramID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", telegramID, err)
		return
	}

	now := time.Now().Unix()

	for _, id := range warehouseIDs {
		coefficient := findCoefficient(coefficients, id)
		if coefficient != nil && (coefficient.Coefficient == 0 || coefficient.Coefficient == 1) && coefficient.AllowUnload {
			lastNotified := getLastNotificationTime(telegramID, id)

			if lastNotified == 0 || now-lastNotified >= int64(repeatNotifyDelay.Seconds()) {
				text := fmt.Sprintf(
					"üì¶ –õ–∏–º–∏—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: %s (ID: %d)\nüìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: %d\nüóì –î–∞—Ç–∞: %s",
					coefficient.WarehouseName,
					coefficient.WarehouseID,
					coefficient.Coefficient,
					coefficient.Date,
				)

				msg := tgbotapi.NewMessage(telegramID, text)
				if _, err := bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", telegramID, err)
				}
				markAsNotified(telegramID, id, now)
			}
		} else {
			unmarkNotification(telegramID, id)
		}
	}
}

// findCoefficient ‚Äî –Ω–∞–π—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ ID —Å–∫–ª–∞–¥–∞
func findCoefficient(coefficients []wb.Coefficient, warehouseID int) *wb.Coefficient {
	for _, c := range coefficients {
		if c.WarehouseID == warehouseID {
			return &c
		}
	}
	return nil
}

// isTooManyRequestsError ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É 429
func isTooManyRequestsError(err error) bool {
	return err != nil && strings.Contains(err.Error(), "429 Too Many Requests")
}
