package bot

import (
	"fmt"
	"log"

	"postavkinBot/internal/storage"
	"postavkinBot/internal/wb"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	WbClient *wb.Client
	Storage  *storage.Storage
)

func HandleStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	telegramID := update.Message.From.ID
	username := update.Message.From.UserName

	exists, err := Storage.UserExists(int64(telegramID))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}

	var text string
	if !exists {
		err := Storage.CreateUser(int64(telegramID), username)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			return
		}
		text = "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
	} else {
		text = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã"
	}

	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
}

func HandleHelp(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	helpText := "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" +
		"/help - –ü–æ–º–æ—â—å\n" +
		"/warehouses - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤\n" +
		"/addwarehouse - –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n" +
		"/mywarehouses - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–∫–ª–∞–¥—ã\n" +
		"/removewarehouse - –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
		"/setinterval - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, helpText))
}

func HandleWarehouses(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	warehouses, err := WbClient.GetWarehouses()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: %v", err)
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if len(warehouses) == 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤."))
		return
	}

	const maxMessageSize = 4000
	text := "üì¶ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤:\n"
	for _, w := range warehouses {
		line := fmt.Sprintf("- %s (ID: %d)\n", w.Name, w.ID)

		if len(text)+len(line) > maxMessageSize {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
			text = ""
		}
		text += line
	}

	if text != "" {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
	}
}

func HandleAddWarehouse(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ ID —Å–∫–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:"))

	waitForUserInput(update, func(input string) {
		var warehouseID int
		if _, err := fmt.Sscanf(input, "%d", &warehouseID); err != nil {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —Å–∫–ª–∞–¥–∞."))
			return
		}

		if err := Storage.AddWarehouseToUser(update.Message.From.ID, warehouseID); err != nil {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞."))
			return
		}

		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ –°–∫–ª–∞–¥ —Å ID %d —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", warehouseID)))
	})
}

func HandleMyWarehouses(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	telegramID := update.Message.From.ID

	warehouseIDs, err := Storage.GetUserWarehouses(int64(telegramID))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–∫–ª–∞–¥–æ–≤."))
		return
	}

	if len(warehouseIDs) == 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /addwarehouse."))
		return
	}

	allWarehouses, err := WbClient.GetWarehouses()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ WB: %v", err)
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	text := "üì¶ –í–∞—à–∏ —Å–∫–ª–∞–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
	for _, id := range warehouseIDs {
		name := findWarehouseName(allWarehouses, id)
		if name == "" {
			name = fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥ (ID: %d)", id)
		}
		text += fmt.Sprintf("- %s (ID: %d)\n", name, id)
	}

	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, text))
}

func HandleRemoveWarehouse(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ ID —Å–∫–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"))

	waitForUserInput(update, func(input string) {
		var warehouseID int
		if _, err := fmt.Sscanf(input, "%d", &warehouseID); err != nil {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —Å–∫–ª–∞–¥–∞."))
			return
		}

		if err := Storage.RemoveWarehouseFromUser(update.Message.From.ID, warehouseID); err != nil {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞."))
			return
		}

		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ –°–∫–ª–∞–¥ —Å ID %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!", warehouseID)))
	})
}

func HandleSetInterval(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 5, 10, 15):"))

	waitForUserInput(update, func(input string) {
		var interval int
		if _, err := fmt.Sscanf(input, "%d", &interval); err != nil || interval <= 0 {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."))
			return
		}

		if err := Storage.UpdateCheckInterval(update.Message.From.ID, interval); err != nil {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."))
			return
		}

		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å –ª–∏–º–∏—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ %d –º–∏–Ω—É—Ç.", interval)))
	})
}
